Given an array of integers and a sum B, find all unique combinations in the array where the sum is equal to B. The same number may be chosen from the array any number of times to make B.

Note:
        1. All numbers will be positive integers.
        2. Elements in a combination (a1, a2, …, ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
        3. The combinations themselves must be sorted in ascending order.




//////////////////GEEKSFORFGEEKS???????????????????



class Solution {
public:
    void solve(vector<int> input, vector<int> op, vector<vector<int>>& res, int t, int i)
    {
        if(t == 0)
        {
            res.push_back(op) ;
            return ;
        }           
        if(t < 0)
            return ;

        if(i == input.size())
            return ;

        op.push_back(input[i]) ;
        solve(input, op, res, t-input[i], i+1) ;
        op.pop_back() ;

        while(i < input.size()-1 && input[i] == input[i+1]) i++ ;             ////////skipping all same numbers, if number x is selected then any other occurrence of x wont be selected
        solve(input, op, res, t, i+1) ;        
        
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end()) ;

        vector<vector<int>> res ;
        solve(candidates, {}, res, target, 0) ;
        return res ;
    }
}
