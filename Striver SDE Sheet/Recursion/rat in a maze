class Solution{
    public:
    bool helper(vector<vector<int>> m, int n, int i, int j)                     ////////to check whether path is valid
    {
        if((i >= n || j >= n) || (i < 0 || j < 0) || m[i][j] == 0)
            return 0 ;
        else 
            return 1 ;
    }
    
    void solve(vector<vector<int>> m, int n, int i, int j, string& str, vector<string>& v)
    {
        if(i == n-1 && j == n-1)
        {
            v.push_back(str) ;
            return ;
        }
        
        m[i][j] = 0 ;                   ////since 1 cell can be visited only once
        
        if(helper(m, n, i+1, j))
        {
            str += 'D' ;
            solve(m, n, i+1, j, str, v) ;
            str.erase(str.size()-1, 1) ;                    ////backtracking, in case of multiple paths
        }
        
        if(helper(m, n, i, j+1))
        {
            str += 'R' ;
            solve(m, n, i, j+1, str, v) ;
            str.erase(str.size()-1, 1) ;
        }
        
        if(helper(m, n, i-1, j))
        {
            str += 'U' ;
            solve(m, n, i-1, j, str, v) ;
            str.erase(str.size()-1, 1) ;
        }
        
        if(helper(m, n, i, j-1))
        {
            str += 'L' ;
            solve(m, n, i, j-1, str, v) ;
            str.erase(str.size()-1, 1) ;
        }
        m[i][j] = 1 ;
        
        return ;
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string> res ;
        
        if(m[0][0] == 0)
            return {"-1"} ;                                 ////rat cannot move
        
        string s="" ;
        solve(m, n, 0, 0, s, res) ;
        
        if(res.size() == 0)                                 /////no path possible
            return {"-1"} ;
        
        return res ;
    }
};
