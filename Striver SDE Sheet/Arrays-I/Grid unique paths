//////////////////////////////////////////////DP soln////////////////////////////////////////////////////////////
class Solution {                                                                /////first refer recursive soln
public:
    int fun(int m, int n, int x, int y, vector<vector<int>>& dp)
    {
        if(x > m-1 || y > n-1)
            return 0;
        
        if(x == m-1 && y == n-1)
            return 1 ;
        
        if(dp[x][y] != -1)                                                      // if already visited, no need to go into the recursive call, just return the no. of possible paths we got when we visited it last time
            return dp[x][y] ;
        else
            return dp[x][y] = fun(m,n, x+1, y, dp) + fun(m,n, x, y+1, dp) ;     // assign no. of possible paths to each cell in hash map after visiting it

    }
    int uniquePaths(int m, int n) {
        int x=0, y=0 ;
        vector<vector<int>> dp(m, vector<int> (n, -1));                         ///hash map containing -1

        int ans = fun(m,n,x,y,dp) ;
        return ans ;
    }
};



//////////////////////////////////////////////recursive soln (TLE)/////////////////////////////////////////////////////////
class Solution {
public:
    int fun(int m, int n, int x, int y)
    {
        if(x > m-1 || y > n-1)                                                ////base case for out of bounds
            return 0;
        
        if(x == m-1 && y == n-1)                                              ///base case for reaching the end
            return 1 ;
       
        return fun(m,n, x+1, y) + fun(m,n, x, y+1) ;                          ///possible cases if we take a right or downward turn

    }
    int uniquePaths(int m, int n) {
        int x=0, y=0 ;
        int ans = fun(m,n,x,y) ;
        return ans ;
    }
};



/////////////////////////////////////////////////combinatrix soln////////////////////////////////////////////////
class Solution {
public:

    int uniquePaths(int m, int n) {                                             // (m+n-2) C (m-1)
        int N = m + n - 2 ;
        int D = min(m-1, n-1) ;
        double c = 1 ;

        for(int i = 0; i<D; i++)
        {
            c *= ((N-i)/(D-i)) ;
        }
        return (int)c ;
    }
};
