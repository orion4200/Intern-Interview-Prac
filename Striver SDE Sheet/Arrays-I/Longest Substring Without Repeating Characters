class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
	int i=0,j=0,ans=0 ;
    map<char, int>mp ;
    mp.clear();

    while(j<s.length())
    {
        mp[s[j]] += 1;
        
        if(mp.size() == (j-i+1))                                  // if map size = window size....means all characters are unique in window
        {
            ans = max(ans, (j-i+1));
            j++ ;
        }
        else if(mp.size() < (j-i+1))                              // repeating chars...so we keep removing s[i] from map and incr i
        {
            while(mp.size() < (j-i+1))
            {
                mp[s[i]]--;
                if(mp[s[i]] == 0)
                    mp.erase(s[i]);

                i++;
            }
            j++;
        }
    }
    return ans;
    }
};
