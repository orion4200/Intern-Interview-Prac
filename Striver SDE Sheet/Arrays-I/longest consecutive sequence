class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        sort(nums.begin(), nums.end()) ;
        int len=0, max_len=0 ;

        if(nums.size() == 0) return 0 ;

        for(int i=0; i<nums.size()-1; i++)
        {
            if(nums[i]+1 == nums[i+1])                          // if consecutive number, then len++
                len++ ;
            else if(len && nums[i] == nums[i+1])                // ex - 0,1,1,2 will be counted 3  
                continue ;
            else
                len = 0 ;

            max_len = max(max_len, len) ;
        }
        return max_len+1 ;
     }
   };

///////////////////////////////////////////O(n) hashset solution//////////////////////////////////

class Solution {
public:
int longestConsecutive(vector<int>& nums) {
        if(nums.size() == 0) return 0 ;
        
        set<int> s ;

        for(int i : nums)
            s.insert(i) ;

        int len = 0 ;

        for(int i : s)
        {
            if(s.count(i-1))                                        // search if num-1 exists or not, if exists the its not the first number of sequence
                continue ;
            else
            {
                int count = 0, cur_num = i ;

                while(s.count(cur_num))                              // while consecutive numbers exist
                {
                    count++ ;
                    cur_num++ ;
                }

                len = max(count, len) ;
            }
        }
        return len ;

    }
};
