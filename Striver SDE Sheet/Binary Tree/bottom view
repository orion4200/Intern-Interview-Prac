class Solution {
  public:
    
    vector <int> bottomView(Node *root) {                                             // using level order traversal and vertical levels
        if(!root)
            return {} ;
        
        vector<int> ans ;
        map<int, int> mp ;
        queue<pair<Node*, int>> q ;
        
        q.push(make_pair(root,0)) ;                                                 //node and its vertical level
        
        while(!q.empty())
        {
            auto p = q.front() ;
            q.pop() ;
            
            mp[p.second] = p.first->data ;                                            // overwrite node value for each level so that we get last node value of each vertical level
            int lvl = p.second ;
            
            if(p.first->left)
                q.push(make_pair(p.first->left, lvl-1)) ;                             // root is at 0 vertical lvl, moving left level decreases, moving right lvl increases
                
            if(p.first->right)
                q.push(make_pair(p.first->right, lvl+1)) ;
            
        }
        
        
        for(auto it:mp)
            ans.push_back(it.second) ;
            
        return ans ;
    }
};
