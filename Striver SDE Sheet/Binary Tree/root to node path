bool path(TreeNode *root, int B, vector<int>& v)
{
    if(!root) return 0 ;
    v.push_back(root->val) ;                                                    // push each node val while traversing
    
    if(root->val == B)                                                
        return 1 ;
        
    bool l = path(root->left, B, v) ;                                           // whether B is present in left subtree
    bool r = path(root->right, B, v) ;                                          // // whether B is present in right subtree
    
    if(l || r) return 1 ;
    
    v.pop_back() ;                                                              // B isnt found, hence pop el and return 0 - path isnt correct
    return 0 ;
}
vector<int> Solution::solve(TreeNode* A, int B) {
    if(!A) return {} ;
    
    if(A->val == B) return {A->val} ;
    
    vector<int> res ;
    bool found = path(A, B, res) ;
    return res ;    
}
