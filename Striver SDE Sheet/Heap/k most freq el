class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        priority_queue<int, vector<int>> q ;
        vector<pair<int, int>> mp ;                                 // to store arr[i] and its freq
        vector<int> res ;

        for(auto it:nums)
            q.push(it) ;

        while(!q.empty())
        {
            int x = q.top() ;
            int freq = 0 ;
            while(!q.empty() && q.top() == x)                     // finding freq of el
            {
                freq++ ;
                q.pop() ;
            }
            mp.push_back(make_pair(freq, x)) ;                  // adding freq,el pair
        }
        
        sort(mp.rbegin(), mp.rend()) ; //for(auto t:mp) cout<<t.first<<' '<<t.second<<endl ;  // sort in descending order
        int i=0 ;
        while(k--)
        {
            res.push_back(mp[i++].second) ;
        }

        return res ;
    }
};


////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q ;                     //priority queue of pair of int
        map<int, int> mp ;
        vector<int> res ;

        for(auto i:nums)                                                                        // create freq map
        {
            mp[i]++ ;
        }

        for(auto it:mp) 
        { 
            q.push(make_pair(it.second, it.first)) ;                                          // add map el to queue with freq being the first part in pair

            if(q.size() > k)                                                                  // if size of q > k, pop el from q to keep it of k size
                q.pop() ; 
        }
        while(q.size())                                                                     // add el to res
        {
            //cout<<q.top().first<<' '<<q.top().second<<endl ;
            res.push_back(q.top().second) ;
            q.pop() ;
        }
        return res ;
    }
};
