//////gfg//////////different type of intersection, refer https://practice.geeksforgeeks.org/problems/intersection-of-two-linked-list/1//////////////////

class Solution{
  public:
    Node* findIntersection(Node* head1, Node* head2)
    {
        unordered_map<int, int> mp ; mp.clear(); 
        
        Node *p = head1, *q = head2 ;
        Node *ans = new Node(-1);
        Node *last = ans ;
        
        while(q)
        {
            mp[q->data]++ ;
            q = q->next ;
        }
        
        while(p)
        {
            if(mp[p->data])
            {
                Node *np = new Node(p->data);
                last->next = np;
                last = last->next ;
            }
            
            p = p->next ;
        }
        
        return ans->next ;
        
        
    }
};

/////////////////leetcode///////////////////////

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *p = headA, *q = headB ;
        
        if(headA == headB)
            return headA ;
        
        if(p == NULL || q == NULL)
            return NULL ;
        
        while(p && q && p != q)
        {
            p = p->next ;
            q = q->next ;
            
            if(p == q)
                return p ;
            
            if(p == NULL)   p = headB ;           ///////interchanging the pointers when they reach NULL so that they become equidistant wrt each other(in case of LLs having different lengths)
            if(q == NULL)   q = headA ;
        }
        return p ;
    }
};
